user  www-data;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /run/nginx.pid;


events {
    worker_connections 4096;
    multi_accept on;
}

worker_rlimit_nofile 8192;

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format with_time '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent" $request_time';
    access_log /var/log/nginx/access.log with_time;
    # access_log off;

    # レスポンスをカーネル側にあるコンテンツの複写から行う
    sendfile on;
    # レスポンスヘッダとファイル内容をまとめて送信する(sendfile&&)
    tcp_nopush on;
    # Nginxのバージョンをレスポンスに含めない
    server_tokens off;
    # タイムアウトしたコネクションを即座に破棄
    reset_timedout_connection on;

    # 単一キープアライブで通信可能な request 数
    keepalive_requests 20000;
    # キープアライブコネクションを開いておける最長期間
    keepalive_timeout 120s;
    # ベンチマークとの相性次第では off にしたほうがいい
    # keepalive off;

    # リクエストボディのバッファサイズ/警告が出たら追加(client request body is buffered to a temporary file)
    # 該当パスのバッファを消す方が早いかも(proxy_request_buffering off;)
    # client_body_buffer_size 32k;
    # レスポンスの先頭部分のバッファサイズ/エラーが出たら追加(upstream sent too big header while reading response header from upstream)
    # proxy_buffer_size 8k; 8->16->32k
    # レスポンスを格納するバッファ数とそのサイズ/警告が出たら追加(an upstream response is buffered to a temporary file)/最大同時接続数は減る
    # proxy_buffers 100 32k;


    # ファイル情報をキャッシュする
    open_file_cache max=100 inactive=10s;
    # ハッシュテーブルサイズ指定(よくわからん)
    types_hash_max_size 2048;
    # Nginx で キャッシュする場合に追加↓ キャッシュ先のファイル指定・2階層で保存・zone1というキー名で1M確保・1ギガまで使う・2分で削除
    proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=zone1:1m max_size=1g inactive=1m;
    proxy_temp_path  /var/cache/nginx/tmp;

    # エラー対策(http2: client connection force closed via ClientConn.Close)
    http2_max_requests 20000;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*.conf;
}
